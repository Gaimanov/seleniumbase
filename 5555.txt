    # def basket_message(self):
    #     msg = self.browser.find_element(*ProductPageLocators.PRODUCT_NAME).text
    #     product = self.browser.find_element(*ProductPageLocators.MESSAGE).text
    #     assert product == msg, 'name of the book does not match book in the message'
    # 
    # def price_message(self):
    #     msg = self.browser.find_element(*ProductPageLocators.PRICE_MSG).text
    #     price = self.browser.find_element(*ProductPageLocators.PRICE).text
    #     assert price == msg, 'price of the book does not match price in the message'
    # 
    # def added_to_basket(self):
    #     assert self.is_element_present(*ProductPageLocators.MESSAGE), "Message is not presented"
    # 
    # def suc_msg_disappeared(self):
    #     assert self.is_disappeared(*ProductPageLocators.ADDED), \
    #         "Success message is presented, but should not be"
    # 
    # def should_not_be_success_message(self):
    #     assert self.is_not_element_present(*ProductPageLocators.ADDED), \
    #    "Success message is presented, but should not be"
    # 
    # def empty_basket_msg_shown(self):
    #     assert self.is_element_present(*ProductPageLocators.BASKET_EMPTY_MSG), "Message about empty " \
    #                                                                            "basket is not presented"
    # 
    # def proof_that_basket_is_empty(self):
    #     assert self.is_not_element_present(*ProductPageLocators.BASKET_EMPTY_PROOF), \
    #         "Message about total price is presented, but should not be"